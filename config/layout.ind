OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(start)

INPUT(&& &&Assembler Files&)   
INPUT(&& &&Source Files&)
INPUT(&& &&Tasks&)

__VECTORS_START__ = 0x00000000;
__TEXT_START__    = 0x20000000;
__DATA_START__    = 0x20080000;
__STACK_END__     = 0x20180000;
__TASKS_START__   = 0x20200000;

SECTIONS
{
  /***********************************************
   *            KERNEL CODE SECTION              *
   ***********************************************/
  .vecs __VECTORS_START__ :
  {
    *vectors.o(.text)
  }
  
  .text __TEXT_START__ :
  {
    *(EXCLUDE_FILE (*vectors.o) .text)
  }
  
  PROVIDE (__etext = .);
  
  /***********************************************
   *        KERNEL READ-ONLY DATA SECTION        *
   *         (merged after kernel code)          *
   ***********************************************/
  .rodata : 
  { 
    *(.rodata) 
    *(.rodata.*) 
  }
  
  /***********************************************
   *            KERNEL DATA SECTION              *
   ***********************************************/
  .data __DATA_START__ :
  {
    *(.data)
    *(.data.*)
  }
  . = ALIGN(4);
  __DATA_END__ = .;
  
  /***********************************************
   *                TASKS SECTION                *
   ***********************************************/
  .task1 __TASKS_START__ : { *dummy.o(task_code)   *dummy.o(task_data) }
  .task2 ALIGN(0x40000):   { *msgtest.o(task_code) *msgtest.o(task_data) }
  .task3 ALIGN(0x40000):   { *iotest.o(task_code)  *iotest.o(task_data) }
  
  . = ALIGN(0x40000);
  __TASKS_END__ = .;
  
  /***********************************************
   * FOLLOWING MEMORY IS FOR DYNAMIC ALLOCATION  *
   ***********************************************/
  . = ALIGN(0x1000);
  __PAGE_OFFSET__ = .;
  
  PROVIDE (end = .);
}

